load "FT.mag";

orderJ3 := Order(Group("J3"));

// Gather the Os
O := [**];
orders := [ i : i in [2..200] | IsPrimePower(i) and GCD(i,orderJ3) eq 1 ];
startAfter := 1;

for order in orders do
if order le startAfter then continue; end if;

"Processing order:",order;
F := GF(order);
XRat := GetJ3(Rationals());
actMat := (&*ActionGenerators(XRat)[[1,2,1,2,2]])^3;
_, T := JordanForm(actMat);

X := GetJ3(F)^(T^-1);
G := Group(X);
//CC:= ConjugacyClasses(G);

DSD := DirectSumDecomposition(X);
if #DSD ne 2 then order,"is not good."; continue; end if;
M1,M2 := Explode(DSD);
"Calculating symmetric squares:";
SS1 := SymmetricSquare(M1);
SS2 := SymmetricSquare(M2); 
"Calculating mults:";
time mu1 := GHom(SS1, M2).1;
time mu2 := GHom(SS2, M1).1;

bas1 := Basis(M1);
bas2 := Basis(M2);

T := Matrix([ X!be : be in bas1 ] cat [ X!be : be in bas2 ]);


//H := Centralizer(G, CC[4][3]);
a := G.1; b := G.2;
H := Centralizer(G, (a*b*a*b*b)^3);

R1 := Restriction(M1,H);
R2 := Restriction(M2,H);
T1 := [ m : m in DirectSumDecomposition(R1) | Dimension(m) eq 1 ][1];
T2 := [ m : m in DirectSumDecomposition(R2) | Dimension(m) eq 1 ][1];

x := M1!R1!T1.1;
y := M2!R2!T2.1;


thisO := [];

"Starting loop:";
for a in F do
  if IsZero(a) then continue; end if;
  for b in F do
    if IsZero(b) then continue; end if;

    adj_ax := 
      T^-1*Matrix([ X!(Vector(SymmetricProduct(a*x, be))*mu1) : be in bas1 ] cat
             [ X!(Vector(SymmetricProduct(b*y, be))*mu2) : be in bas2 ]);

    // Only take the ones with a one in the top left
//    if adj_ax[1,1] ne 1 then continue; end if;
    //if adj_ax[1,1] eq 1 then SMMat(adj_ax);""; end if;

    //SF<t> := SplittingField(MinimalPolynomial(adj_ax));
    //ad := ChangeRing(adj_ax, SF);

    //JF := JordanForm(ad);
    //if IsDiagonal(JF) then

 //   ev := { x[1] : x in Eigenvalues(adj_ax) };
 //   if {1,-1} subset ev then
      thisO := thisO cat [ adj_ax ];
 //   end if;

    //end if;

  end for;
end for;

PrintFileMagma(Sprintf("E%o", order), thisO: Overwrite := true);
Append(~O, thisO);

end for;

