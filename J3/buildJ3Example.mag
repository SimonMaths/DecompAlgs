load "~/FT.mag";

F := GF(11);
X := GetJ3(F);
G := Group(X);
CC:= ConjugacyClasses(G);

DSD := DirectSumDecomposition(X);
assert #DSD eq 2;
M1,M2 := Explode(DSD);
"Calculating symmetric squares:";
time SS1 := SymmetricSquare(M1);
time SS2 := SymmetricSquare(M2); 
"Calculating mults:";
time mu1 := GHom(SS1, M2).1;
time mu2 := GHom(SS2, M1).1;

bas1 := Basis(M1);
bas2 := Basis(M2);

T := Matrix([ X!be : be in bas1 ] cat [ X!be : be in bas2 ]);

H := Centralizer(G, CC[4][3]);

R1 := Restriction(M1,H);
R2 := Restriction(M2,H);
T1 := [ m : m in DirectSumDecomposition(R1) | Dimension(m) eq 1 ][1];
T2 := [ m : m in DirectSumDecomposition(R2) | Dimension(m) eq 1 ][1];

x := M1!R1!T1.1;
y := M2!R2!T2.1;

MPs := {};

"Starting loop:";
for a in F do
  if IsZero(a) then continue; end if;
for b in F do
  if IsZero(b) then continue; end if;
c := F!1;
d := F!1;
//for c in F do
//  if IsZero(c) then continue; endif;
//for d in F do
//  if IsZero(d) then continue; endif;

  adj_ax := 
    T^-1*Matrix([ X!(Vector(SymmetricProduct(a*x, be))*c*mu1) : be in bas1 ] cat
           [ X!(Vector(SymmetricProduct(b*y, be))*d*mu2) : be in bas2 ]);

  SF<t> := SplittingField(MinimalPolynomial(adj_ax));
  ad := ChangeRing(adj_ax, SF);

  JF := JordanForm(ad);
  if not IsDiagonal(JF) then
    [a,b,c,d];
  end if;

  num := #MPs;
  MPs := { MinimalPolynomial(ad) } join MPs;
  if num ne #MPs then
    MPs;
    for x in MPs do
      Factorization(x);
    end for;
  end if;

end for;
end for;
//end for;
//end for;
